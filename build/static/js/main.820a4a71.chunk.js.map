{"version":3,"sources":["components/Card.js","components/CardList.js","robots.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","username","SearchBox","searchfield","SearchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","OnSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","FilterRobots","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.820a4a71.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className='bg-light-red tc dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt=\"robos\" src={`https://robohash.org/${props.id}?size=200x200`}></img>\r\n            <div>\r\n                <h3>#{props.id}</h3>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return(\r\n                    <Card id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n                    );\r\n                })\r\n            }    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'Mr Who',\n    username: 'oeoe',\n    email: 'Sincere@wswrwl.bizw'\n  },\n  {\n    id: 2,\n    name: 'Robo Corps',\n    username: 'Ronette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Weapon 11',\n    username: 'wolveie',\n    email: 'whereis@wolveriene.net'\n  },\n  {\n    id: 4,\n    name: 'Mark 420',\n    username: 'imiron22',\n    email: 'am.i.ironman@nope.org'\n  },\n  {\n    id: 5,\n    name: 'Vision 0.5',\n    username: 'ulreon',\n    email: 'notUltron@really.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. De Hoist',\n    username: 'Monkeyo_Corkery',\n    email: 'mooy_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Connors',\n    username: 'KK.kkk.k',\n    email: 'Connorrr@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Copernicus V',\n    username: 'Planet_Round',\n    email: 'Sunis@far.boo'\n  },\n  {\n    id: 9,\n    name: 'Codename 46',\n    username: 'not47',\n    email: 'nopeman_Iaint47@ica.io'\n  },\n  {\n    id: 10,\n    name: 'Cleuque 2.0',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  },\n  {\n    id: 11,\n    name: 'Boss Man',\n    username: 'boss.man000',\n    email: 'boo.Padwww@woo.biz'\n  },\n  {\n    id: 12,\n    name: 'Alcatraz',\n    username: 'Bowwsw.qsanton',\n    email: 'Hey.sssberg@sarina.biz'\n  },\n  {\n    id: 13,\n    name: 'Magic Joker',\n    username: 'Miah.joke',\n    email: 'mohkoej@karina.biz'\n  },\n  {\n    id: 14,\n    name: 'Snipe Valley',\n    username: 'ispy.you',\n    email: 'not.fishy@goggle.biz'\n  },\n  {\n    id: 15,\n    name: 'Scarlette NoChanceSon',\n    username: 'Black.wood',\n    email: 'avenger.scjo@stone.infinity'\n  },\n  {\n    id: 16,\n    name: 'Mark 0',\n    username: 'imdiron22',\n    email: 'u.r.ironman@nope.org'\n  },\n  {\n    id: 17,\n    name: 'Mark !3',\n    username: 'imiron22',\n    email: 'am.i.ironman.mark3@nope.org'\n  },\n  {\n    id: 18,\n    name: 'Mark 99',\n    username: 'imiron222',\n    email: 'am.i.ironman@dope.org'\n  },\n  {\n    id: 19,\n    name: 'Soap McTavis\\'nt',\n    username: 'imiron22',\n    email: 'cod.i.sas@nope.uk'\n  },\n  {\n    id: 20,\n    name: 'Cpt. Priced',\n    username: 'expensiverice',\n    email: 'cod.price.nope@nope.uk'\n  },\n  {\n    id: 21,\n    name: 'Spider-manned',\n    username: 'spoody',\n    email: 'okspidey@gohome.bye'\n  }\n];\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, SearchChange}) => {\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input type=\"search\" \r\n            placeholder=\"Find Robot\" \r\n            className=\"pa3 ba b--green bg-lightest-blue\" \r\n            onChange={SearchChange}  />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{ overflowY: 'scroll', border: '2px solid black', height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport { robots } from '../robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n            this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(users => {\r\n            this.setState({robots: robots})\r\n        })\r\n\r\n    }\r\n\r\n    OnSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n        //console.log(event.target.value);\r\n        //console.log(FilterRobots)\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchfield} = this.state;\r\n\r\n        const FilterRobots = robots.filter(robots => {\r\n        return robots.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        if(robots.length === 0){\r\n            return <h1 className=\"tc\">Loading Robos, Please wait!</h1>\r\n        } else {\r\n            return(\r\n                <div className=\"tc\">\r\n                    <h1 className='f1'>Cyber Buddies</h1>\r\n\r\n                    <SearchBox SearchChange={this.OnSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={ FilterRobots }/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n//import Card from './Card';\n//import CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import { robots } from './robots';\n\nReactDOM.render(\n    <App />  \n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}